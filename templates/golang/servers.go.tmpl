{{- define "servers" -}}

//
// Registry Http Services ({{ .HttpServices | Length }})
//

{{ range $service := .HttpServices -}}
func Register{{ $service.Name }}Server(r Registererer, srv {{ $service.Name }}) {
	{{- range $method := $service.Methods -}}

	{{ if and $method.IsBinary $method.IsStream }}
	{{ else if $method.IsStream }}
	{{ else if $method.IsUpload }}
	r.Register(
		"{{ $service.Name }}.{{ $method.Name }}",
		{{ $method | ProcessName }}(
			func(
				ctx context.Context,
				args struct {
					{{- range $arg := $method.Args }}
					{{- if not $arg.Stream -}}
					{{ $arg.Name | ToPascalCase }} {{ $arg.Type }} `json:"{{ $arg.Name | ToCamelCase }}"`
					{{- end }}
					{{- end }}
				},
				{{ range $arg := $method.Args }}
				{{- if $arg.Stream -}}
				{{ $arg.Name }} func() (string, io.Reader, error),
				{{- end }}
				{{- end }}
			) (
				{{- range $ret := $method.Returns }}
				{{ $ret.Type }},
				{{- end }}
				error,
			) {
				return srv.{{ $method.Name }}(
					ctx, 
					{{- range $arg := $method.Args }}
					{{- if not $arg.Stream -}}
					args.{{ $arg.Name | ToPascalCase }},
					{{- end }}
					{{- end }}
					{{ range $arg := $method.Args }}
					{{- if $arg.Stream -}}
					{{ $arg.Name }},
					{{- end }}
					{{- end }}
				)
			},
		),
	)	
	{{ else }}
	r.Register(
		"{{ $service.Name }}.{{ $method.Name }}",
		{{ $method | ProcessName }}(
			func(
				ctx context.Context,
				args struct {
					{{- range $arg := $method.Args }}
					{{ $arg.Name | ToPascalCase }} {{ $arg.Type }} `json:"{{ $arg.Name | ToCamelCase }}"`
					{{- end }}
				},
			) (
				{{- range $ret := $method.Returns }}
				{{ $ret.Type }},
				{{- end }}
				error,
			) {
				return srv.{{ $method.Name }}(
					ctx, 
					{{- range $arg := $method.Args }}
					args.{{ $arg.Name | ToPascalCase }},
					{{- end }}
				)
			},
		),
	)
	{{- end }}

	{{- end }}
}
{{- end }}

//
// Registry Rpc Services ({{ .RpcServices | Length }})
//

{{ range $service := .RpcServices -}}
func Register{{ $service.Name }}Server(r Registererer, srv {{ $service.Name }}) {
	{{- range $method := $service.Methods }}

	r.Register(
		"{{ $service.Name }}.{{ $method.Name }}",
		{{ $method | ProcessName }}(
			func(
				ctx context.Context,
				args struct {
					{{- range $arg := $method.Args }}
					{{ $arg.Name }} {{ $arg.Type }} `json:"{{ $arg.Name | ToCamelCase }}"`
					{{- end }}
				},
			) (
				{{- range $ret := $method.Returns }}
				{{ $ret.Type }},
				{{- end }}
				error,
			) {
				return srv.Add(
					ctx, 
					{{- range $arg := $method.Args }}
					args.{{ $arg.Name | ToPascalCase }},
					{{- end }}
				)
			},
		),
	)

	{{- end }}
}
{{- end }}

{{- end }}