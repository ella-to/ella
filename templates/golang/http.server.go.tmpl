{{- define "http.server" -}}
//
// HTTP Service Servers
//
{{ range $service := .HttpServices }}
const {{ $service | ToServicePathName }} = "{{ $service | ToServicePathValue }}"
	{{- range $method := $service.Methods }}
const {{ $method | ToMethodPathName }} = "{{ $method | ToMethodPathValue }}"
	{{- end }}
{{- end }}

var AllHttpServiceMethodPaths = []string{
{{- range $service := .HttpServices }}
{{- range $method := $service.Methods }}
	{{ $method | ToMethodPathName }},
{{- end }}
{{- end }}
}

{{- range $service := .HttpServices }}
{{- $serviceImplName := $service | ToHttpServiceImplName}}

type {{ $serviceImplName }} struct {
	service Http{{ $service.Name }}
	{{- range $i, $method := $service.Methods }}
	route{{ $i }} httpServiceMethodHandler // {{ $method.Name }}
	{{- end }}
}

var _ http.Handler = (*{{ $serviceImplName }})(nil)

func (s *{{ $serviceImplName }}) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	var handler httpServiceMethodHandler

	ctx := r.Context()

	switch r.URL.Path {
	{{- range $i, $method := $service.Methods }}
	case {{ $method | ToMethodPathName }}:
		handler = s.route{{ $i }}
	{{- end }}
	default:
		httpResponseError(ctx, w, ErrServiceMethodNotFound.WithMsg("method %q not found", r.URL.Path))
		return
	}

	// ctx = injectCommonVars(ctx, w, r)

	handler(ctx, w, r)
}

{{- range $i, $method := $service.Methods }}

func (s *{{ $serviceImplName }}) create{{ $method.Name }}() httpServiceMethodHandler {
	var handler httpServiceMethodHandler

	type Input struct {
{{ $method.Args | ToArgsDefinition 2 }}
	}

	type Output struct {
{{ $method.Returns | ToReturnsDefinition 2 }}
	}

	{{- if and $method.IsBinary $method.IsStream }}

	// binary stream
	handler = createStreamBinaryServiceMethod(
		"{{ $method.HttpMethod }}",
		{{ $method.HasArgs }},
		func(ctx context.Context, input *Input) (io.Reader, string, string, error) {
			return s.service.{{ $method.Name }}({{ $method.Args | ToArgsAccess "input." }})
		},
	)
	{{- else if $method.IsStream }}

	// stream
	handler = createStreamServiceMethod(
		"{{ $method.HttpMethod }}",
		{{ $method.HasArgs }},
		{{ $method.Timeout }},
		func (ctx context.Context, input *Input) ({{ (index $method.Returns 0).Type }}, error) {
			return s.service.{{ $method.Name }}({{ $method.Args | ToArgsAccess "input." }})
		},
	)
	{{- else if $method.HttpRawControl }}

	// raw control
	handler = createServiceMethodRawHandler(
		"{{ $method.HttpMethod }}",
		func(ctx context.Context, w http.ResponseWriter, r *http.Request) {
			s.service.{{ $method.Name }}(ctx, w, r)
		},
	)
	{{- else if $method.IsUpload }}

	// upload
	handler = createServiceMethodUploadHandler(
		{{ $method.TotalMaxSize }},
		func (ctx context.Context, input *Input, nextFile func() (string, io.Reader, error)) (output *Output, err error) {
			{{- if $method.HasReturns }}
			output = &Output{}
			{{- end }}
			{{ $method.Returns | ToReturnsAccess "output." }} = s.service.{{ $method.Name }}({{ $method.Args | ToArgsAccess "input." }}, nextFile)
			return
		},
	)
	{{- else }}

	// method
	handler = createServiceMethodHandler(
		"{{ $method.HttpMethod }}",
		{{ $method.HasArgs }},
		func(ctx context.Context, input *Input) (output *Output, err error) {
			{{- if $method.HasReturns }}
			output = &Output{}
			{{- end }}
			{{ $method.Returns | ToReturnsAccess "output." }} = s.service.{{ $method.Name }}({{ $method.Args | ToArgsAccess "input." }})
			return output, err
		},
	)
	{{- end }}

	return handler
}
{{- end }}

func Create{{ $service.Name }}Server(service Http{{ $service.Name }}) http.Handler {
	server := {{ $serviceImplName }}{
		service: service,
	}

	{{- range $i, $method := $service.Methods }}
	server.route{{ $i }} = server.create{{ $method.Name }}()
	{{- end }}

	return &server
}

{{ end }}

{{- end }}