{{- define "helper" }}
//
// Helper functions
//

// Http

type httpServiceMethodHandler func(context.Context, http.ResponseWriter, *http.Request)

// Error

type Error struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
	Status  int    `json:"status"`
	Cause   error  `json:"cause,omitempty"`
}

var _ error = (*Error)(nil)

func (e *Error) Error() string {
	if e.Cause != nil {
		return fmt.Sprintf("%d: %s: %v", e.Code, e.Message, e.Cause)
	}
	return fmt.Sprintf("%d: %s", e.Code, e.Message)
}

func (e Error) Is(target error) bool {
	if target == nil {
		return false
	}
	if rpcErr, ok := target.(*Error); ok {
		return rpcErr.Code == e.Code
	}
	return errors.Is(e.Cause, target)
}

func (e Error) Unwrap() error {
	return e.Cause
}

func (e Error) WithCause(cause error) *Error {
	err := e
	err.Cause = cause
	return &err
}

func (e Error) WithMsg(msg string, args ...any) *Error {
	err := e
	err.Message = fmt.Sprintf(msg, args...)
	return &err
}

func (e *Error) MarshalJSON() ([]byte, error) {
	payload := struct {
		Error struct {
			Code    int64  `json:"code"`
			Message string `json:"message"`
			Status  int    `json:"status"`
			Cause   string `json:"cause,omitempty"`
		} `json:"error"`
	}{}

	payload.Error.Code = e.Code
	payload.Error.Message = e.Message
	payload.Error.Status = e.Status
	if e.Cause != nil {
		payload.Error.Cause = e.Cause.Error()
	}

	return json.Marshal(payload)
}

func (e *Error) UnmarshalJSON(data []byte) error {
	wrapper := struct {
		Error json.RawMessage `json:"error"`
	}{}

	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	}

	if bytes.Index(wrapper.Error, []byte("{")) == 0 {
		return json.Unmarshal(wrapper.Error, e)
	}

	e.Message = string(wrapper.Error)
	e.Code = 0
	e.Status = 500
	e.Cause = nil

	return nil
}

func newError(code int64, status int, format string, args ...any) *Error {
	return &Error{
		Code:    code,
		Message: fmt.Sprintf(format, args...),
		Status:  status,
	}
}

//
// Http server Utilities
//

func createServiceMethodRawHandler(
	method string,
	fn func(ctx context.Context, w http.ResponseWriter, r *http.Request),
) httpServiceMethodHandler {
	return func(ctx context.Context, w http.ResponseWriter, r *http.Request) {
		if r.Method != method {
			httpResponseError(ctx, w, ErrMethodNotAllowed.WithMsg("method %q not allowed", r.Method))
			return
		}

		defer func() {
			if err := recover(); err != nil {
				// In case of a panic, serve a 500 error and then panic.
				w.WriteHeader(http.StatusInternalServerError)
				panic(err)
			}
		}()

		ctx = injectEllaCtx(ctx, &ellaContext{
			HttpRequest: r,
			HttpResponseWriter: w,
		})

		fn(ctx, w, r)
	}
}

func createServiceMethodHandler[ReqMsg, RespMsg any](
	method string,
	hasFields bool,
	fn func(ctx context.Context, req *ReqMsg) (*RespMsg, error),
) httpServiceMethodHandler {
	return func(ctx context.Context, w http.ResponseWriter, r *http.Request) {
		if r.Method != method {
			httpResponseError(ctx, w, ErrMethodNotAllowed.WithMsg("method %q not allowed", r.Method))
			return
		}

		defer func() {
			if err := recover(); err != nil {
				// In case of a panic, serve a 500 error and then panic.
				w.WriteHeader(http.StatusInternalServerError)
				panic(err)
			}
		}()

		var reqMsg ReqMsg

		if method == http.MethodGet {
			if err := parseQueryString(r, &reqMsg); err != nil {
				w.WriteHeader(http.StatusBadRequest)
				return
			}
		} else if hasFields {
			if err := checkContentType(r, "application/json"); err != nil {
				w.WriteHeader(http.StatusUnsupportedMediaType)
				return
			}

			if err := json.NewDecoder(r.Body).Decode(&reqMsg); err != nil {
				w.WriteHeader(http.StatusBadRequest)
				return
			}
		}

		ctx = injectEllaCtx(ctx, &ellaContext{
			HttpRequest: r,
			HttpResponseWriter: w,
		})

		respMsg, err := fn(ctx, &reqMsg)
		if err != nil {
			httpResponseError(ctx, w, err)
			return
		}

		httpResponse(w, http.StatusOK, respMsg)
	}
}

func createStreamBinaryServiceMethod[ReqMsg any](
	method string,
	hasFields bool,
	fn func(ctx context.Context, req *ReqMsg) (io.Reader, string, string, error),
) httpServiceMethodHandler {
	return func(ctx context.Context, w http.ResponseWriter, r *http.Request) {
		if r.Method != method {
			httpResponseError(ctx, w, ErrMethodNotAllowed.WithMsg("method %q not allowed", r.Method))
			return
		}

		defer func() {
			if err := recover(); err != nil {
				// In case of a panic, serve a 500 error and then panic.
				w.WriteHeader(http.StatusInternalServerError)
				panic(err)
			}
		}()

		var reqMsg ReqMsg

		if method == http.MethodGet {
			if err := parseQueryString(r, &reqMsg); err != nil {
				w.WriteHeader(http.StatusBadRequest)
				return
			}
		} else if hasFields {
			if err := checkContentType(r, "application/json"); err != nil {
				w.WriteHeader(http.StatusUnsupportedMediaType)
				return
			}

			if err := json.NewDecoder(r.Body).Decode(&reqMsg); err != nil {
				w.WriteHeader(http.StatusBadRequest)
				return
			}
		}

		ctx, cancel := context.WithCancel(ctx)
		defer cancel()

		ctx = injectEllaCtx(ctx, &ellaContext{
			HttpRequest: r,
			HttpResponseWriter: w,
		})

		streamReader, filename, contentType, err := fn(ctx, &reqMsg)
		if err != nil {
			httpResponseError(ctx, w, err)
			return
		}
		if closer, ok := streamReader.(io.Closer); ok {
			defer closer.Close()
		}

		if contentType == "" {
			contentType = "application/octet-stream"
		}

		w.Header().Set("Content-Type", contentType)
		if filename != "" {
			w.Header().Set("Content-Disposition", fmt.Sprintf("attachment; filename=%s", filename))
		}

		io.Copy(w, streamReader)
	}
}

func createStreamServiceMethod[ReqMsg any, RespMsg any](
	method string,
	hasFields bool,
	timeout time.Duration,
	fn func(ctx context.Context, req *ReqMsg) (<-chan RespMsg, error),
) httpServiceMethodHandler {
	return func(ctx context.Context, w http.ResponseWriter, r *http.Request) {
		if r.Method != method {
			httpResponseError(ctx, w, ErrMethodNotAllowed.WithMsg("method %q not allowed", r.Method))
			return
		}

		defer func() {
			if err := recover(); err != nil {
				// In case of a panic, serve a 500 error and then panic.
				w.WriteHeader(http.StatusInternalServerError)
				panic(err)
			}
		}()

		var reqMsg ReqMsg

		if method == http.MethodGet {
			if err := parseQueryString(r, &reqMsg); err != nil {
				w.WriteHeader(http.StatusBadRequest)
				return
			}
		} else if hasFields {
			if err := checkContentType(r, "application/json"); err != nil {
				w.WriteHeader(http.StatusUnsupportedMediaType)
				return
			}

			if err := json.NewDecoder(r.Body).Decode(&reqMsg); err != nil {
				w.WriteHeader(http.StatusBadRequest)
				return
			}
		}

		ctx, cancel := context.WithCancel(ctx)
		defer cancel()

		if timeout == 0 {
			timeout = 1 * time.Second
		}

		pusher, err := sse.NewPusher(w, timeout)
		if err != nil {
			httpResponseError(ctx, w, ErrInternal.WithCause(err))
			return
		}
		defer pusher.Close()

		ctx = injectEllaCtx(ctx, &ellaContext{
			HttpRequest: r,
			HttpResponseWriter: w,
		})

		events, err := fn(ctx, &reqMsg)
		if err != nil {
			httpResponseError(ctx, w, err)
			return
		}

		countMsgId := int64(0)
		msg := sse.Message{}

		for {
			select {
			case <-ctx.Done():
				return
			case event, ok := <-events:
				if !ok {
					return
				}

				id := strconv.FormatInt(countMsgId, 10)
				msg.Id = &id

				encodedMsg, err := json.Marshal(event)
				if err != nil {
					msg.Event = "error"
					data := fmt.Sprintf("failed to encode event: %v", err)
					msg.Data = &data
				} else {
					msg.Event = "event"
					data := string(encodedMsg)
					msg.Data = &data
				}

				if err := pusher.Push(&msg); err != nil {
					slog.ErrorContext(ctx, "failed to push event", "error", err)
					return
				}

				countMsgId++
			}
		}
	}
}

func createServiceMethodUploadHandler[ReqMsg, RespMsg any](
	totalMaxSize int64,
	fn func(
		ctx context.Context,
		req *ReqMsg,
		nextFile func() (string, io.Reader, error),
	) (*RespMsg, error),
) httpServiceMethodHandler {
	return func(ctx context.Context, w http.ResponseWriter, r *http.Request) {
		if r.Method != http.MethodPost {
			httpResponseError(ctx, w, ErrMethodNotAllowed.WithMsg("method %q not allowed", r.Method))
			return
		}

		r.Body = http.MaxBytesReader(w, r.Body, totalMaxSize)

		reader, err := r.MultipartReader()
		if err != nil {
			httpResponseError(ctx, w, err)
			return
		}

		part, err := reader.NextPart()
		if err != nil {
			httpResponseError(ctx, w, err)
			return
		}

		if part.FormName() != "payload" {
			part.Close()
			httpResponseError(ctx, w, ErrMissingPayloadName)
			return
		}

		var req ReqMsg
		err = json.NewDecoder(part).Decode(&req)
		part.Close()
		if err != nil {
			httpResponseError(ctx, w, err)
			return
		}

		nextFile := func() (string, io.Reader, error) {
			part, err := reader.NextPart()
			if err != nil {
				return "", nil, err
			}

			if part.FormName() != "files" {
				return "", nil, ErrMissingFilesField
			}

			return part.FileName(), part, nil
		}

		ctx = injectEllaCtx(ctx, &ellaContext{
			HttpRequest: r,
			HttpResponseWriter: w,
		})

		resp, err := fn(ctx, &req, nextFile)
		if err != nil {
			httpResponseError(ctx, w, err)
			return
		}

		httpResponse(w, http.StatusOK, resp)
	}
}

//
// Request/Response Utilities
//

func isContentType(r *http.Request, contentType string) bool {
	header := r.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}

	return strings.TrimSpace(header[:i]) == contentType
}

func checkContentType(r *http.Request, contentType string) error {
	if !isContentType(r, contentType) {
		return ErrUnsupportedMediaType.WithMsg("content type %q not supported", r.Header.Get("Content-Type"))
	}
	return nil
}

func parseQueryString(r *http.Request, ptr any) error {
	return valuesToStruct(r.URL.Query(), ptr)
}

func httpResponse(w http.ResponseWriter, code int, body any) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(code)

	switch body := body.(type) {
	case nil:
		return
	case io.Reader:
		io.Copy(w, body)
	default:
		json.NewEncoder(w).Encode(body)
	}
}

// httpResponseError is a helper function that writes an error to the http response
// if the error is of type *Error, it will write the error code and message
// and if code is valid http status code, it will write the http status code
// otherwise it will write 500
func httpResponseError(ctx context.Context, w http.ResponseWriter, err error) {
	switch err := err.(type) {
	case *Error:
		if err.Status < 100 || err.Status > 599 {
			httpResponse(w, http.StatusInternalServerError, err)
			return
		}
		slog.ErrorContext(ctx, "http response error", "status", err.Status, "code", err.Code, "message", err.Message, "cause", err.Cause)
		httpResponse(w, err.Status, err)
	default:
		httpResponseError(ctx, w, &Error{
			Code:    0,
			Message: "internal server error",
			Status:  http.StatusInternalServerError,
			Cause: 	 err,
		})
	}
}

type rpcAdaptor interface {
	Request(ctx context.Context, topic string, in any) (json.RawMessage, error)
	Reply(ctx context.Context, topic string, fn func(ctx context.Context, in json.RawMessage) (out any, err error)) error
}

//
// Http Client Utilities
//

type httpClientDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

func createURLWithPaths(host string, paths ...string) (*url.URL, error) {
	u, err := url.Parse(host)
	if err != nil {
		return nil, err
	}

	u.Path = path.Join(u.Path, path.Join(paths...))
	return u, nil
}

func jsonEncodeReader(value any) io.ReadCloser {
	r, w := io.Pipe()
	go func() {
		err := json.NewEncoder(w).Encode(value)
		if err != nil {
			w.CloseWithError(err)
			return
		}
		w.Close()
	}()
	return r
}

func structToURL(host string, ptr any) (string, error) {
	u, err := url.Parse(host)
	if err != nil {
		return "", err
	}

	u.RawQuery = structToValues(ptr).Encode()

	return u.String(), nil
}

// structToValues converts a struct to url.Values
// supports only basic types, string, int, float, bool
// and ignores other complex types
func structToValues(ptr any) url.Values {
	values := url.Values{}
	v := reflect.Indirect(reflect.ValueOf(ptr))

	t := v.Type()
	for i := 0; i < t.NumField(); i++ {
		field := t.Field(i)
		value := v.Field(i)

		// Convert the field value to a string
		var strValue string
		switch value.Kind() {
		case reflect.String:
			strValue = url.QueryEscape(value.String())
		case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
			strValue = strconv.FormatInt(value.Int(), 10)
		case reflect.Float32, reflect.Float64:
			strValue = strconv.FormatFloat(value.Float(), 'f', -1, 64)
		case reflect.Bool:
			strValue = strconv.FormatBool(value.Bool())
		default:
			continue
		}

		// Add the key-value pair to the values
		if strValue != "" {
			key := field.Tag.Get("json")
			if key == "" {
				key = field.Name
			}
			values.Add(key, strValue)
		}
	}
	return values
}

// valuesToStruct converts url.Values to a struct
// supports only basic types, string, int, float, bool
// returns an error if the struct contains unsupported types
func valuesToStruct(values url.Values, ptr any) error {
	dType := reflect.TypeOf(ptr)
	dhVal := reflect.ValueOf(ptr)

	for i := 0; i < dType.Elem().NumField(); i++ {
		field := dType.Elem().Field(i)
		key := field.Tag.Get("json")
		kind := field.Type.Kind()

		val := values.Get(key)

		result := dhVal.Elem().Field(i)

		switch kind {
		case reflect.String:
			val, err := url.QueryUnescape(val)
			if err != nil {
				return err
			}
			result.SetString(val)
		case reflect.Int:
			v, err := strconv.ParseInt(val, 10, 64)
			if err != nil {
				return err
			}
			result.SetInt(v)
		case reflect.Float64:
			v, err := strconv.ParseFloat(val, 64)
			if err != nil {
				return err
			}
			result.SetFloat(v)
		case reflect.Bool:
			v, err := strconv.ParseBool(val)
			if err != nil {
				return err
			}
			result.SetBool(v)
		default:
			return fmt.Errorf("unsupported type %s", kind)
		}
	}
	return nil
}

func getRandomBoundary() string {
	var buf [30]byte
	_, err := io.ReadFull(rand.Reader, buf[:])
	if err != nil {
		panic(err)
	}
	return fmt.Sprintf("%x", buf[:])
}

func callHttpEndpoint(ctx context.Context, client httpClientDoer, url string, method string, hasArgs bool, in any) (r io.ReadCloser, err error) {
	if hasArgs {
		if method == http.MethodGet {
			url, err = structToURL(url, in)
			if err != nil {
				return nil, err
			}
		} else {
			r = jsonEncodeReader(in)
		}
	}

	req, err := http.NewRequestWithContext(ctx, method, url, r)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", "application/json")

	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}

	if resp.StatusCode >= 300 {
		defer resp.Body.Close()
		err := &Error{}
		if err := json.NewDecoder(resp.Body).Decode(err); err != nil {
			return nil, err
		}
		return nil, err
	}

	return resp.Body, nil
}

func callHttpServiceMethod(ctx context.Context, client httpClientDoer, url string, method string, hasArgs bool, hasReturns bool, in any, out any) (err error) {
	r, err := callHttpEndpoint(ctx, client, url, method, hasArgs, in)
	if err != nil {
		return err
	}
	defer r.Close()

	if !hasReturns {
		return nil
	}

	return json.NewDecoder(r).Decode(out)
}

func callHttpBinaryStreamEndpoint(ctx context.Context, client httpClientDoer, url string, method string, hasArgs bool, in any) (r io.ReadCloser, filename string, contentType string, err error) {
	if hasArgs {
		if method == http.MethodGet {
			url, err = structToURL(url, in)
			if err != nil {
				return nil, "", "", err
			}
		} else {
			r = jsonEncodeReader(in)
		}
	}

	req, err := http.NewRequestWithContext(ctx, method, url, r)
	if err != nil {
		return nil, "", "", err
	}

	req.Header.Set("Content-Type", "application/json")

	resp, err := client.Do(req)
	if err != nil {
		return nil, "", "", err
	}

	if resp.StatusCode >= 300 {
		defer resp.Body.Close()
		err := &Error{}
		if err := json.NewDecoder(resp.Body).Decode(&err); err != nil {
			return nil, "", "", err
		}
		return nil, "", "", err
	}

	contentType = resp.Header.Get("Content-Type")
	filename = strings.Replace(resp.Header.Get("Content-Disposition"), "attachment; filename=", "", 1)

	return resp.Body, filename, contentType, nil
}

func callHttpFilesUpload(ctx context.Context, client httpClientDoer, url string, method string, payload any, files func() (string, io.Reader, error), respBody any) error {
	pr, pw := io.Pipe()

	boundary := getRandomBoundary()

	go func() {
		var err error
		var part io.Writer
		var filename string
		var content io.Reader

		mw := multipart.NewWriter(pw)

		defer func() {
			mw.Close()
			if err != nil {
				pw.CloseWithError(err)
			} else {
				pw.Close()
			}
		}()

		err = mw.SetBoundary(boundary)
		if err != nil {
			return
		}

		part, err = mw.CreateFormField("payload")
		if err != nil {
			return
		}

		_, err = io.Copy(part, jsonEncodeReader(payload))
		if err != nil {
			return
		}

		for {
			err = func() error {
				filename, content, err = files()
				if err != nil {
					return err
				}

				if closer, ok := content.(io.Closer); ok {
					defer closer.Close()
				}

				part, err = mw.CreateFormFile("files", filename)
				if err != nil {
					return err
				}

				_, err = io.Copy(part, content)
				return err
			}()
			if errors.Is(err, io.EOF) {
				err = nil
				return
			}
		}
	}()

	req, err := http.NewRequestWithContext(ctx, method, url, pr)
	if err != nil {
		return err
	}

	req.Header.Set("Content-Type", "multipart/form-data; boundary="+boundary)

	resp, err := client.Do(req)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	if resp.StatusCode >= 300 {
		err := &Error{}
		if err := json.NewDecoder(resp.Body).Decode(&err); err != nil {
			return err
		}
		return err
	}

	return json.NewDecoder(resp.Body).Decode(respBody)
}

func callHttpStreamEndpoint[Resp any](ctx context.Context, client httpClientDoer, url string, method string, hasArgs bool, in any, isRespPtr bool) (<-chan Resp, error) {
	r, err := callHttpEndpoint(ctx, client, url, method, hasArgs, in)
	if err != nil {
		return nil, err
	}

	receiver := sse.NewReceiver(r)

	events := make(chan Resp, 1)

	go func() {
		defer close(events)
		defer r.Close()

		var event Resp

		for {
			msg, err := receiver.Receive(ctx)
			if err != nil {
				return
			}

			if isRespPtr {
				if err := json.Unmarshal([]byte(*msg.Data), event); err != nil {
					return
				}
			} else {
				if err := json.Unmarshal([]byte(*msg.Data), &event); err != nil {
					return
				}
			}

			select {
			case events <- event:
			case <-ctx.Done():
				return
			}
		}
	}()

	return events, nil
}

const ctxEllaKey = "_ella.ctx.key_"

func injectEllaCtx(ctx context.Context, value any) context.Context {
	return context.WithValue(ctx, ctxEllaKey, value)
}

func ExtractEllaCtx(ctx context.Context) *ellaContext {
	e, ok := ctx.Value(ctxEllaKey).(*ellaContext)
	if !ok {
		panic("ella context not found")
	}
	return e
}

type ellaContext struct {
	HttpRequest *http.Request
	HttpResponseWriter http.ResponseWriter
}

{{- end }}