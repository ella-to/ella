{{- define "http.client" }}
//
// SERVICES IMPLEMENTATION
//
{{ range $service := .HttpServices }}
export function create{{ $service.Name }}(host: string): {{ $service.Name }} {
    return {
{{- range $method := $service.Methods }}
{{- if eq $method.Type "fileupload" }} 
        {{ $method.Name | ToCamelCase }}: (
            files: {name: string, data: Blob}[],
            args: {{ $method | ArgsName }},
            opts?: CallServiceOptions): Promise<{{ $method | ReturnsName }}> => {
            return callServiceUploadMethod(
                host,
                "{{ $method | MethodPathValue }}",
                "{{ $method.HttpMethod }}",
                args,
                files,
                opts);
        },
{{- else }}
        {{ $method.Name | ToCamelCase }}: (
            args: {{ $method | ArgsName }},
            opts?: CallServiceOptions): Promise<{{ $method | ReturnsName }}> => {
{{- if eq $method.Type "stream" }}
            return callServiceStreamMethod(
                host,
                "{{ $method | MethodPathValue }}",
                "{{ $method.HttpMethod }}",
                args,
                opts);
{{- else }}
            return callServiceMethod(
                host,
                "{{ $method | MethodPathValue }}",
                "{{ $method.HttpMethod }}",
                args,
                {{ if eq $method.Type "binary" }}true{{- else }}false{{- end }},
                opts);
{{- end }}
        },
{{- end }}
{{- end }}
    };
}
{{- end }}

{{- end}}