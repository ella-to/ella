{{- define "helpers" }}
//
// Ella's helper functions
//

type Request struct {
	Id          string                            `json:"id"`
	Method      string                            `json:"method"`
	Params      json.RawMessage                   `json:"params"`
	ContentType string                            `json:"-"`
	Files       func() (string, io.Reader, error) `json:"-"`
	Boundary    string                            `json:"-"`
}

//
// Caller
//

type Caller interface {
	Call(ctx context.Context, req *Request) (body io.Reader, contentType string)
}

type CallerFunc func(ctx context.Context, req *Request) (body io.Reader, contentType string)

var _ Caller = (*CallerFunc)(nil)

func (f CallerFunc) Call(ctx context.Context, req *Request) (body io.Reader, contentType string) {
	return f(ctx, req)
}

//
// Handler
//

type Handler interface {
	Handle(ctx context.Context, req *Request, resp io.Writer)
}

type HandlerFunc func(ctx context.Context, req *Request, resp io.Writer)

var _ Handler = (*HandlerFunc)(nil)

func (f HandlerFunc) Handle(ctx context.Context, req *Request, resp io.Writer) {
	f(ctx, req, resp)
}

//
// HandleRegistry
//

type HandleRegistry interface {
	RegisterHandle(name string, handler Handler)
}

//
// MemoryHandleRegistry
//

type MemoryHandleRegistry struct {
	handlers map[string]Handler
}

var (
	_ HandleRegistry = (*MemoryHandleRegistry)(nil)
	_ Handler        = (*MemoryHandleRegistry)(nil)
)

func (r *MemoryHandleRegistry) RegisterHandle(name string, sender Handler) {
	r.handlers[name] = sender
}

func (r *MemoryHandleRegistry) Handle(ctx context.Context, req *Request, resp io.Writer) {
	handler, ok := r.handlers[req.Method]
	if !ok {
		writeJsonError(resp, &Error{
			Code:    0,
			Message: "method not found",
		})
		return
	}
	handler.Handle(ctx, req, resp)
}

func NewMemoryHandleRegistry() *MemoryHandleRegistry {
	return &MemoryHandleRegistry{
		handlers: make(map[string]Handler),
	}
}

//
// Error
//

type Error struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
	Cause   error  `json:"cause,omitempty"`
}

var _ error = (*Error)(nil)

func (e *Error) Error() string {
	if e.Cause != nil {
		return fmt.Sprintf("%d: %s: %v", e.Code, e.Message, e.Cause)
	}
	return fmt.Sprintf("%d: %s", e.Code, e.Message)
}

func (e Error) Is(target error) bool {
	if target == nil {
		return false
	}
	if rpcErr, ok := target.(*Error); ok {
		return rpcErr.Code == e.Code
	}
	return errors.Is(e.Cause, target)
}

func (e Error) Unwrap() error {
	return e.Cause
}

func (e Error) WithCause(cause error) *Error {
	err := e
	err.Cause = cause
	return &err
}

func (e Error) WithMsg(msg string, args ...any) *Error {
	err := e
	err.Message = fmt.Sprintf(msg, args...)
	return &err
}

func (e *Error) MarshalJSON() ([]byte, error) {
	payload := struct {
		Error struct {
			Code    int64  `json:"code"`
			Message string `json:"message"`
			Cause   string `json:"cause,omitempty"`
		} `json:"error"`
	}{}

	payload.Error.Code = e.Code
	payload.Error.Message = e.Message
	if e.Cause != nil {
		payload.Error.Cause = e.Cause.Error()
	}

	return json.Marshal(payload)
}

func (e *Error) UnmarshalJSON(data []byte) error {
	wrapper := struct {
		Code    int64  `json:"code"`
		Message string `json:"message"`
		Cause   string `json:"cause,omitempty"`
	}{}

	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	}

	e.Message = wrapper.Message
	e.Code = wrapper.Code
	e.Cause = errors.New(wrapper.Cause)

	return nil
}

func newError(code int64, format string, args ...any) *Error {
	return &Error{
		Code:    code,
		Message: fmt.Sprintf(format, args...),
	}
}

//
// Http Client Helpers
//

func parseCallerResponse(r io.Reader, ptrs ...any) (err error) {
	resp := struct {
		Result []json.RawMessage `json:"result"`
		Error  *Error            `json:"error,omitempty"`
	}{}

	if err = json.NewDecoder(r).Decode(&resp); err != nil {
		return
	}

	if resp.Error != nil {
		return resp.Error
	}

	if len(ptrs) != len(resp.Result) {
		err = fmt.Errorf("unexpected number of results: %d, got: %d", len(resp.Result), len(ptrs))
		return
	}

	for i, result := range resp.Result {
		if err = json.Unmarshal(result, ptrs[i]); err != nil {
			return
		}
	}

	return nil
}

func NewHttpClient(endpoint string, client *http.Client) Caller {
	if client == nil {
		client = http.DefaultClient
	}

	return CallerFunc(func(ctx context.Context, req *Request) (io.Reader, string) {
		var err error
		var r io.Reader
		var contentType string

		switch req.ContentType {
		case "application/json":
			{
				pr, pw := io.Pipe()
				r = pr

				go func() {
					err = json.NewEncoder(pw).Encode(req)
					if err != nil {
						pw.CloseWithError(err)
						return
					}
					pw.Close()
				}()

				contentType = "application/json"
			}
		case "multipart/form-data":
			{
				if req.Boundary == "" {
					req.Boundary = getRandomBoundary()
				}

				contentType = "multipart/form-data; boundary=" + req.Boundary

				pr, pw := io.Pipe()
				r = pr

				go func() {
					var part io.Writer

					mw := multipart.NewWriter(pw)

					defer func() {
						mw.Close()
						if err != nil {
							pw.CloseWithError(err)
						} else {
							pw.Close()
						}
					}()

					err = mw.SetBoundary(req.Boundary)
					if err != nil {
						return
					}

					part, err = mw.CreateFormField("id")
					if err != nil {
						return
					}

					_, err = io.Copy(part, strings.NewReader(req.Id))
					if err != nil {
						return
					}

					part, err = mw.CreateFormField("method")
					if err != nil {
						return
					}

					_, err = io.Copy(part, strings.NewReader(req.Method))
					if err != nil {
						return
					}

					part, err = mw.CreateFormField("params")
					if err != nil {
						return
					}

					_, err = io.Copy(part, bytes.NewReader(req.Params))
					if err != nil {
						return
					}

					var filename string
					var fileReader io.Reader

					for {
						filename, fileReader, err = req.Files()
						if errors.Is(err, io.EOF) {
							break
						} else if err != nil {
							return
						}

						part, err = mw.CreateFormFile("file", filename)
						if err != nil {
							return
						}

						_, err = io.Copy(part, fileReader)
						if err != nil {
							return
						}
					}
				}()
			}
		}

		httpReq, err := http.NewRequestWithContext(ctx, http.MethodPost, endpoint, r)
		if err != nil {
			return errorJsonReader(err), "application/json"
		}

		httpReq.Header.Set("Content-Type", contentType)

		httpResp, err := http.DefaultClient.Do(httpReq)
		if err != nil {
			return errorJsonReader(err), "application/json"
		}

		if httpResp.StatusCode != http.StatusOK {
			return httpResp.Body, "application/json"
		}

		contentDisposition := httpResp.Header.Get("Content-Disposition")
		if contentDisposition != "" {
			filename := strings.TrimSuffix(strings.TrimPrefix(contentDisposition, `attachment; filename="`), `"`)
			contentType = httpResp.Header.Get("Content-Type") + ";" + filename
		} else {
			contentType = httpResp.Header.Get("Content-Type")
		}

		return httpResp.Body, contentType
	})
}

func getRandomBoundary() string {
	var buf [30]byte
	_, err := io.ReadFull(rand.Reader, buf[:])
	if err != nil {
		panic(err)
	}
	return fmt.Sprintf("%x", buf[:])
}

//
// Http Server Helpers
//

{{ range $size, $_ := .Json2Json }}
func handleJsonToJson{{ $size }}[{{ GenArgsGenerics $size }}](fn func(context.Context, A) ({{ GenReturnsGenerics $size }})) Handler {
	return HandlerFunc(func(ctx context.Context, req *Request, resp io.Writer) {
		params, err := parseParams[A](bytes.NewReader(req.Params))
		if err != nil {
			writeJsonError(resp, err)
			return
		}

		writeJsonResults(resp)(fn(ctx, params))
	})
}
{{ end }}

{{ range $size, $_ := .Binary2Json }}
func handleBinaryToJson{{ $size }}[{{ GenArgsGenerics $size }}](fn func(context.Context, A, func() (string, io.Reader, error)) ({{ GenReturnsGenerics $size }})) Handler {
	return HandlerFunc(func(ctx context.Context, req *Request, resp io.Writer) {
		params, err := parseParams[A](bytes.NewReader(req.Params))
		if err != nil {
			writeJsonError(resp, err)
			return
		}

		writeJsonResults(resp)(fn(ctx, params, req.Files))
	})
}
{{ end }}

{{ if .Json2Binary }}
func handleJsonToBinary[A any](fn func(context.Context, A) (io.Reader, string, string, error)) Handler {
	return HandlerFunc(func(ctx context.Context, req *Request, resp io.Writer) {
		params, err := parseParams[A](bytes.NewReader(req.Params))
		if err != nil {
			writeJsonError(resp, err)
			return
		}

		r, filename, contentType, err := fn(ctx, params)
		if err != nil {
			writeJsonError(resp, err)
			return
		}

		if contentType == "" {
			contentType = "application/octet-stream"
		}

		if w, ok := resp.(http.ResponseWriter); ok {
			w.Header().Set("Content-Type", contentType)
			w.Header().Set("Content-Disposition", `attachment; filename="`+filename+`"`)

			w.WriteHeader(http.StatusOK)
		}

		io.Copy(resp, r)
	})
}
{{ end }}

{{ if .Json2SSE }}
func handleJsonToSSE[A, R any](fn func(context.Context, A) (<-chan R, <-chan error)) Handler {
	return HandlerFunc(func(ctx context.Context, req *Request, resp io.Writer) {
		var err error

		params, err := parseParams[A](bytes.NewReader(req.Params))
		if err != nil {
			writeJsonError(resp, err)
			return
		}

		ch, errs := fn(ctx, params)
		if err != nil {
			writeJsonError(resp, err)
			return
		}

		writeSSE(ch, errs, resp)
	})
}
{{ end }}

{{ if .Binary2Binary }}
func handleBinaryToBinary[A any](fn func(context.Context, A, func() (string, io.Reader, error)) (io.Reader, string, string, error)) Handler {
	return HandlerFunc(func(ctx context.Context, req *Request, resp io.Writer) {
		params, err := parseParams[A](bytes.NewReader(req.Params))
		if err != nil {
			writeJsonError(resp, err)
			return
		}

		idx := 0
		r, filename, contentType, err := fn(ctx, params, func() (string, io.Reader, error) {
			defer func() {
				idx++
			}()

			if idx >= len(req.Readers) {
				return "", nil, io.EOF
			}

			return req.Filenames[idx], req.Readers[idx], nil
		})
		if err != nil {
			writeJsonError(resp, err)
			return
		}

		if contentType == "" {
			contentType = "application/octet-stream"
		}

		if w, ok := resp.(http.ResponseWriter); ok {
			w.Header().Set("Content-Type", contentType)
			w.Header().Set("Content-Disposition", `attachment; filename="`+filename+`"`)

			w.WriteHeader(http.StatusOK)
		}

		io.Copy(resp, r)
	})
}
{{ end }}

{{ if .Binary2SSE }}
func handleBinaryToSSE[A, R any](fn func(context.Context, A, func() (string, io.Reader, error)) (<-chan R, <-chan error)) Handler {
	return HandlerFunc(func(ctx context.Context, req *Request, resp io.Writer) {
		var err error

		params, err := parseParams[A](bytes.NewReader(req.Params))
		if err != nil {
			errs := make(chan error, 1)
			errs <- err
			return
		}

		idx := 0
		ch, errs := fn(ctx, params, func() (string, io.Reader, error) {
			defer func() {
				idx++
			}()

			if idx >= len(req.Readers) {
				return "", nil, io.EOF
			}

			return req.Filenames[idx], req.Readers[idx], nil
		})
		if err != nil {
			return
		}

		writeSSE(ch, errs, resp)
	})
}
{{ end }}

func parseHandlerRequest(r io.Reader, contentType string) (*Request, error) {
	req := new(Request)

	if contentType == "application/json" {
		if err := json.NewDecoder(r).Decode(req); err != nil {
			return nil, err
		}
	} else if strings.HasPrefix(contentType, "multipart/form-data") {
		boundary := strings.TrimPrefix(contentType, "multipart/form-data; boundary=")
		if boundary == "" {
			return nil, errors.New("missing boundary")
		}
		req.Boundary = boundary

		reader := multipart.NewReader(r, boundary)

		gotMeta := false

		for !gotMeta {
			part, err := reader.NextPart()
			if errors.Is(err, io.EOF) {
				break
			} else if err != nil {
				return nil, err
			}

			switch part.FormName() {
			case "id":
				{
					data, err := io.ReadAll(part)
					if err != nil {
						return nil, fmt.Errorf("failed to read multipart id: %w", err)
					}
					req.Id = string(data)
				}

			case "method":
				{
					data, err := io.ReadAll(part)
					if err != nil {
						return nil, fmt.Errorf("failed to read multipart method: %w", err)
					}
					req.Method = string(data)
				}

			case "params":
				{
					data, err := io.ReadAll(part)
					if err != nil {
						return nil, fmt.Errorf("failed to read multipart params: %w", err)
					}
					req.Params = data
				}
				gotMeta = true

			default:
				{
					return nil, fmt.Errorf("unknown multipart field: %s", part.FormName())
				}
			}
		}

		if req.Method == "" {
			return nil, fmt.Errorf("missing method field in form data")
		}

		req.Files = func() (string, io.Reader, error) {
			part, err := reader.NextPart()
			if errors.Is(err, io.EOF) {
				return "", nil, io.EOF
			} else if err != nil {
				return "", nil, err
			}

			filename := part.FileName()
			if filename == "" {
				return "", nil, fmt.Errorf("missing filename")
			}

			return filename, part, nil
		}
	}

	req.ContentType = contentType

	return req, nil
}

func NewHttpHandler(srv Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		req, err := parseHandlerRequest(r.Body, r.Header.Get("Content-Type"))
		if err != nil {
			writeJsonError(w, err)
			return
		}

		srv.Handle(r.Context(), req, w)
	})
}

func parseParams[A any](r io.Reader) (a A, err error) {
	err = json.NewDecoder(r).Decode(&a)
	return
}

func readSSE[R any](ctx context.Context, r io.Reader) (<-chan R, <-chan error) {
	recv := sse.NewReceiver(r)
	results := make(chan R, 1)
	errors := make(chan error, 1)

	go func() {
		defer close(results)
		defer close(errors)

		for {
			msg, err := recv.Receive(ctx)
			if err != nil {
				return
			}

			switch msg.Event {
			case "data":
				{
					var result R
					if err := json.Unmarshal([]byte(msg.Data), &result); err != nil {
						errors <- err
						continue
					}
					results <- result
				}
			case "error":
				customErr := new(Error)
				if err := json.NewDecoder(strings.NewReader(msg.Data)).Decode(customErr); err != nil {
					errors <- err
					continue
				}
				errors <- customErr
				continue
			case "end":
				return
			}
		}
	}()

	return results, errors
}

{{ if or .Json2SSE .Binary2SSE }}
func writeSSE[T any](ch <-chan T, errs <-chan error, resp io.Writer) {
	var id int64
	pusher, err := sse.NewPusher(resp, 5 * time.Second)
	if err != nil {
		writeJsonError(resp, err)
		return
	}

	defer func() {
		pusher.Close()
		id++

		if err != nil {
			var sb strings.Builder
			writeJsonError(&sb, err)
			pusher.Push(sse.NewMessage(fmt.Sprintf("%d", id), "error", sb.String()))
			id++
		}

		pusher.Push(sse.NewMessage(fmt.Sprintf("%d", id), "end", ""))
	}()

	var buffer bytes.Buffer
	var msg *sse.Message

	for {
		select {
		case err, ok := <-errs:
			{
				if !ok {
					return
				}

				id++
				buffer.Reset()
				writeJsonError(&buffer, err)
				msg = sse.NewMessage(fmt.Sprintf("%d", id), "error", buffer.String())
			}
		case e, ok := <-ch:
			{
				if !ok {
					return
				}

				id++
				buffer.Reset()
				json.NewEncoder(&buffer).Encode(e)
				msg = sse.NewMessage(fmt.Sprintf("%d", id), "data", buffer.String())
			}
		}

		if err := pusher.Push(msg); err != nil {
			return
		}
	}
}
{{ end }}

func errorJsonReader(err error) io.Reader {
	pr, pw := io.Pipe()
	go writeJsonError(pw, err)
	return pr
}

func writeJsonError(resp io.Writer, err error) {
	switch e := err.(type) {
	case *Error:
		{
			json.NewEncoder(resp).Encode(e)
		}
	default:
		writeJsonError(resp, &Error{
			Code:    0,
			Message: "something unknown happens",
			Cause:   err,
		})
	}
}

func writeJsonResults(out io.Writer) func(...any) {
	return func(rets ...any) {
		w, isHttpWriter := out.(http.ResponseWriter)

		if isHttpWriter {
			w.Header().Set("Content-Type", "application/json")
		}

		if len(rets) > 0 && rets[len(rets)-1] != nil {
			if isHttpWriter {
				w.WriteHeader(http.StatusExpectationFailed)
			}
			writeJsonError(out, rets[len(rets)-1].(error))
		}

		if isHttpWriter {
			w.WriteHeader(http.StatusOK)
		}

		if len(rets) > 0 {
			// remove the last element, as it is an error
			rets = rets[:len(rets)-1]
		}

		json.NewEncoder(out).Encode(struct {
			Result any `json:"result"`
		}{
			Result: rets,
		})
	}
}

func chanWithError(err error) <-chan error {
	errs := make(chan error, 1)
	errs <- err
	return errs
}

{{- end }}