{{- if .HasRpcServices }}
//
// RPC Servers
//

const (
{{- range $service := .RpcServices }}
	{{ $service.TopicName }} = "{{ $service.TopicValue }}"
{{- range $method := $service.Methods }}
    {{ $method.TopicName }} = "{{ $method.TopicValue }}"
{{- end }}    
{{- end }}
)

{{- range $service := .RpcServices }}
func StartRpc{{ $service.Name }}Server(service Rpc{{ $service.Name }}, adaptor rpcAdaptor) (drain func (), err error) {
    ctx, cancel := context.WithCancel(context.Background())

    drain = func() {
        cancel()
    }

    {{ range $method := $service.Methods }}
    err = adaptor.Reply(ctx, {{ $method.TopicName }}, func(ctx context.Context, data json.RawMessage) (any, error) {
        in := struct {
            {{ $method.ArgsStructDefinitions true }}
        }{}

        err := json.Unmarshal(data, &in)
        if err != nil {
            return encodeRpcError(err), nil
        }

        out := struct {
            {{ $method.ReturnsStructDefinitions }}
        }{}

        {{ $method.ReturnsNames "out." }} err = service.{{ $method.Name }}(
            context.Background(), 
            {{ $method.ArgsNames "in." }}
        )
        if err != nil {
            return encodeRpcError(err), nil
        }

        return out, nil
    })
    if err != nil {
        return
    }

    {{- end }}

	return
}

{{ end }}
{{ end }}